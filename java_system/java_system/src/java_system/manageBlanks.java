/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package java_system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vu Pham
 */
public class manageBlanks extends javax.swing.JFrame {

    /**
     * Creates new form manageBlanks
     */
    public manageBlanks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        AdvisorIDField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        BlankIDFromField = new javax.swing.JTextField();
        BlankIDToField = new javax.swing.JTextField();
        AssignBlanksButton = new javax.swing.JButton();
        ReassignBlanksButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BlankToLable = new javax.swing.JLabel();
        BlankFromLable = new javax.swing.JLabel();
        AdvisorIDLable = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AdvisorTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        BlanksTable444 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        MainPageButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        BlanksNumber = new javax.swing.JSpinner();
        BlanksType = new javax.swing.JComboBox<>();
        AddBlanks = new javax.swing.JButton();
        blankNumberField = new javax.swing.JTextField();
        BlankNumberLable = new javax.swing.JLabel();
        UpdateAdvisorTable = new javax.swing.JButton();
        UpdateBlanksTable = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        BlanksTable440 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        BlanksTable420 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        BlanksTable201 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        BlanksTable101 = new javax.swing.JTable();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 145));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Manage Blanks");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("AdvisorID: ");

        AdvisorIDField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AdvisorIDFieldKeyReleased(evt);
            }
        });

        jLabel3.setText("BlankID:");

        BlankIDFromField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BlankIDFromFieldKeyReleased(evt);
            }
        });

        BlankIDToField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BlankIDToFieldKeyReleased(evt);
            }
        });

        AssignBlanksButton.setText("Assign Blanks");
        AssignBlanksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignBlanksButtonActionPerformed(evt);
            }
        });

        ReassignBlanksButton.setText("Reassign Blanks");
        ReassignBlanksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReassignBlanksButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("From:");

        jLabel8.setText("To:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel8)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BlankIDToField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(BlankIDFromField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AdvisorIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BlankToLable)
                            .addComponent(BlankFromLable)
                            .addComponent(AdvisorIDLable)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(AssignBlanksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ReassignBlanksButton)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AdvisorIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(AdvisorIDLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlankIDFromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlankFromLable)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlankIDToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlankToLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AssignBlanksButton)
                    .addComponent(ReassignBlanksButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel4.setText("Advisor's Table:");

        jLabel5.setText("Blank's Table:");

        AdvisorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Name", "Surname", " ID", "Type", "BlankID", "Status"
            }
        ));
        jScrollPane1.setViewportView(AdvisorTable);

        BlanksTable444.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane2.setViewportView(BlanksTable444);

        jLabel6.setText("StaffID:");

        jButton5.setText("Log Out");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        MainPageButton.setText("Main Page");
        MainPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainPageButtonActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        BlanksType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "444", "440", "420", "201", "101" }));
        BlanksType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlanksTypeActionPerformed(evt);
            }
        });

        AddBlanks.setText("Add Blanks");
        AddBlanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBlanksActionPerformed(evt);
            }
        });

        blankNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                blankNumberFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(AddBlanks)
                .addContainerGap(104, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(BlanksType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BlankNumberLable)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(blankNumberField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BlanksNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlanksNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BlanksType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blankNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlankNumberLable)
                .addGap(19, 19, 19)
                .addComponent(AddBlanks)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        UpdateAdvisorTable.setText("Update Table");
        UpdateAdvisorTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateAdvisorTableActionPerformed(evt);
            }
        });

        UpdateBlanksTable.setText("Update Table");
        UpdateBlanksTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBlanksTableActionPerformed(evt);
            }
        });

        BlanksTable440.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane3.setViewportView(BlanksTable440);

        BlanksTable420.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane4.setViewportView(BlanksTable420);

        BlanksTable201.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane5.setViewportView(BlanksTable201);

        BlanksTable101.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane6.setViewportView(BlanksTable101);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(MainPageButton)
                        .addGap(36, 670, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(108, 108, 108))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(UpdateAdvisorTable))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 1, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(125, 125, 125))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addGap(57, 57, 57))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 10, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(UpdateBlanksTable)
                        .addGap(201, 201, 201))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(MainPageButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UpdateAdvisorTable)
                            .addComponent(UpdateBlanksTable))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MainPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainPageButtonActionPerformed

        officeManager om = new officeManager();
        om.setVisible(true);
        om.pack();
        om.setLocationRelativeTo(null);
        
        this.dispose();
    }//GEN-LAST:event_MainPageButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void UpdateAdvisorTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateAdvisorTableActionPerformed
        // TODO add your handling code here:
            PreparedStatement ps;
       String query="SELECT firstName, lastName, s.staffID, b.type, b.blankID, b.status FROM staff AS s INNER JOIN blanks AS b WHERE b.staffID=s.staffID";
       Connection con =null;
       
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)AdvisorTable.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getString("firstName"),rs.getString("lastName"),rs.getInt("s.staffID"),rs.getInt("b.type"),rs.getString("b.blankID"),rs.getString("b.status")};
             tm.addRow(o);
         }  
          con.close();
                 System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }finally{
         
         
         
     }   
        
    }//GEN-LAST:event_UpdateAdvisorTableActionPerformed

    private void UpdateBlanksTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBlanksTableActionPerformed
        // TODO add your handling code here:
        
      Connection con=null;
       
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
        PreparedStatement ps;
        String query="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=444;";
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)BlanksTable444.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("type"),rs.getString("MIN(blankID)"),rs.getString("MAX(blankID)")};
             tm.addRow(o);
         }  
         
         PreparedStatement ps1;
        String query1="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=440;";
         ps1=con.prepareStatement(query1);
         ResultSet rs1=ps1.executeQuery();
         DefaultTableModel tm1=(DefaultTableModel)BlanksTable440.getModel();
         tm1.setRowCount(0); 
         while(rs1.next()){
             Object o[]={rs1.getInt("type"),rs1.getString("MIN(blankID)"),rs1.getString("MAX(blankID)")};
             tm1.addRow(o);
         }  
         
          PreparedStatement ps2;
        String query2="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=420;";
         ps2=con.prepareStatement(query2);
         ResultSet rs2=ps2.executeQuery();
         DefaultTableModel tm2=(DefaultTableModel)BlanksTable420.getModel();
         tm2.setRowCount(0); 
         while(rs2.next()){
             Object o[]={rs2.getInt("type"),rs2.getString("MIN(blankID)"),rs2.getString("MAX(blankID)")};
             tm2.addRow(o);
         }  
         
          PreparedStatement ps3;
        String query3="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=201;";
         ps3=con.prepareStatement(query3);
         ResultSet rs3=ps3.executeQuery();
         DefaultTableModel tm3=(DefaultTableModel)BlanksTable201.getModel();
         tm3.setRowCount(0); 
         while(rs3.next()){
             Object o[]={rs3.getInt("type"),rs3.getString("MIN(blankID)"),rs3.getString("MAX(blankID)")};
             tm3.addRow(o);
         }  
         
          PreparedStatement ps4;
        String query4="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=101;";
         ps4=con.prepareStatement(query4);
         ResultSet rs4=ps4.executeQuery();
         DefaultTableModel tm4=(DefaultTableModel)BlanksTable101.getModel();
         tm4.setRowCount(0); 
         while(rs4.next()){
             Object o[]={rs4.getInt("type"),rs4.getString("MIN(blankID)"),rs4.getString("MAX(blankID)")};
             tm4.addRow(o);
         }  
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }finally{
         if(con!=null){
             try {
                 con.close();
                 System.out.println("Close Connection");
             } catch (SQLException ex) {
                 Logger.getLogger(manageBlanks.class.getName()).log(Level.SEVERE, null, ex);
             }
             
         }
     }
        
        
    }//GEN-LAST:event_UpdateBlanksTableActionPerformed

    private void AddBlanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBlanksActionPerformed
        // TODO add your handling code here:
        if(blankNumberField.getText().trim().isEmpty()){
            BlankNumberLable.setText("Blank number is empty");
            
        }else if(blankNumberField.getText().length()!=8){
            JOptionPane.showMessageDialog(null,"Wrong Length for the Blank Number "+blankNumberField.getText().length());
            
        }
        
        Connection con=null;
        
        int btype=Integer.valueOf((String) BlanksType.getSelectedItem()); 
        int blanks=(Integer)BlanksNumber.getValue(); 
        int bnum= Integer.parseInt(blankNumberField.getText());
   
      
        
        try{
            con=MyConnection.getConnection();
            PreparedStatement ps1=con.prepareStatement("SELECT  MAX(`blankNumber`) FROM `blanks` WHERE type="+btype+";");
            ResultSet rs=ps1.executeQuery();
                while (rs.next()) {
                int myvar=bnum;
                insert(myvar,btype,blanks,con);
                   System.out.println(" max in the db "+myvar); 
                    con=MyConnection.getConnection();
                }
                 if(ps1.executeUpdate()>0){
             JOptionPane.showMessageDialog(null,"Blanks Added");
         }else{
                 }
        }catch (SQLException ex){
          //JOptionPane.showMessageDialog(null,"Wrong Input in the ID field"); 
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
            
     }
      
    }//GEN-LAST:event_AddBlanksActionPerformed
/* this function adds the amount of blanks that was selected in the GUI and is called by the code that check watis the lates blank that was added as a number
    myvar is 
    btype is blank type which it should be assigend to 
    blanks is the nubmer that follows the blank type going from the highest in the database to the number of blanks specifed 
    myvar is the biggest blank in the databse
    */
    public void insert(int myvar, int btype, int blanks,Connection con){
         try{
            for(int i=myvar;i<myvar+blanks+1;i++){  
                PreparedStatement ps;
                String query="INSERT INTO `blanks`(`blankID`, `staffID`, `type`, `status`, `blankNumber`, `commissionRate`, `dateRecieved`, `dateAssigned`) VALUES (?,?,?,?,?,?,?,?)";
                ps=con.prepareStatement(query);
                
                
        String blank="";
        int z=8-String.valueOf(i).length();
        for(int k=0;k<z;k++){
            blank=blank+"0";
        }

             ps.setString(1,Integer.toString(btype) + blank+String.valueOf(i));
             ps.setInt(2,-1);
             ps.setInt(3,btype);
             ps.setString(4,"unused");
             ps.setInt(5,i);
             ps.setInt(6,0);
             ps.setString(7,"2000-12-23");
             ps.setString(8,"2000-12-23");
         if(ps.executeUpdate()>0){
             System.out.println("Blank added "+i);
             //JOptionPane.showMessageDialog(null,"Blank added");
         }
            }
             if(con!=null){
                 try {
                     con.close();
                 } catch (SQLException ex) {
                     Logger.getLogger(manageBlanks.class.getName()).log(Level.SEVERE, null, ex);
                 }
             }
            
            
         
     }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }
    }
    
 /*changes id from string to integer */
     public int idtoint(String myid){ 
         int z=3;
       while(myid.charAt(z)!='0'){
           z++;
           }return Integer.parseInt(myid.substring(z));
   }
    
    private void AssignBlanksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignBlanksButtonActionPerformed
        // TODO add your handling code here:
        if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            AdvisorIDLable.setText("Advisor ID is empty");
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDToField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
             AdvisorIDLable.setText("Advisor ID is empty");
        }
        
        
        
        String adid=AdvisorIDField.getText();
        String bfrom=BlankIDFromField.getText(); 
        String bto= BlankIDToField.getText(); 
       // System.out.println(bto+bfrom);
        Connection con=null;
  
         try{
             con=MyConnection.getConnection();
             System.out.println("Get Connection");
          for(int i=idtoint(bfrom);i<idtoint(bto)+1;i++){
            String blank=bfrom.substring(0,3);
            int z=8-String.valueOf(i).length();
            for(int k=0;k<z;k++){
                blank=blank+"0";
            }
            blank=blank+String.valueOf(i);
           
           System.out.println("the where part "+blank+" the id "+adid);
           PreparedStatement ps;
                String query="UPDATE blanks SET staffID="+adid +" WHERE blankID="+blank+" AND staffID=-1;";

                ps=con.prepareStatement(query);
           
          // PreparedStatement ps=MyConnection.getConnection().prepareStatement("UPDATE blanks SET staffID="+adid+"WHERE blankID="+blank);
           //44400000001
            ps.execute();
           
           }       
           con.close();
            System.out.println("Close Connection");
                 System.out.println(" assigned from "+bfrom+"to"+bto+"whith advisor"+adid);
        }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }
        
        
        
    }//GEN-LAST:event_AssignBlanksButtonActionPerformed

    private void ReassignBlanksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReassignBlanksButtonActionPerformed
        // TODO add your handling code here:
         if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            AdvisorIDLable.setText("Advisor ID is empty");
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDToField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
             AdvisorIDLable.setText("Advisor ID is empty");
        }
        
        
        
        
        String adid=AdvisorIDField.getText();
        String bfrom=BlankIDFromField.getText(); 
        String bto= BlankIDToField.getText(); 
       // System.out.println(bto+bfrom);
        Connection con=null;
  
         try{
             con=MyConnection.getConnection();
             System.out.println("Get Connection");
          for(int i=idtoint(bfrom);i<idtoint(bto)+1;i++){
            String blank=bfrom.substring(0,3);
            int z=8-String.valueOf(i).length();
            for(int k=0;k<z;k++){
                blank=blank+"0";
            }
            blank=blank+String.valueOf(i);
           
           System.out.println("the where part "+blank+" the id "+adid);
           PreparedStatement ps;
                String query="UPDATE blanks SET staffID="+adid +" WHERE blankID="+blank+";";

                ps=con.prepareStatement(query);
           
          // PreparedStatement ps=MyConnection.getConnection().prepareStatement("UPDATE blanks SET staffID="+adid+"WHERE blankID="+blank);
           //44400000001
            ps.execute();
           }       
          con.close();
           System.out.println("Close Connection");
                 System.out.println(" assigned from "+bfrom+"to"+bto+"whith advisor"+adid);
        }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }
        
    }//GEN-LAST:event_ReassignBlanksButtonActionPerformed

    private void BlanksTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlanksTypeActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_BlanksTypeActionPerformed

    private void AdvisorIDFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AdvisorIDFieldKeyReleased
        // TODO add your handling code here:
        AdvisorIDLable.setText("");
    }//GEN-LAST:event_AdvisorIDFieldKeyReleased

    private void BlankIDFromFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankIDFromFieldKeyReleased
        // TODO add your handling code here:
        BlankFromLable.setText("");
    }//GEN-LAST:event_BlankIDFromFieldKeyReleased

    private void BlankIDToFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankIDToFieldKeyReleased
        // TODO add your handling code here:
        BlankToLable.setText("");
    }//GEN-LAST:event_BlankIDToFieldKeyReleased

    private void blankNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_blankNumberFieldKeyReleased
        // TODO add your handling code here:
        BlankNumberLable.setText("");
    }//GEN-LAST:event_blankNumberFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageBlanks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBlanks;
    private javax.swing.JTextField AdvisorIDField;
    private javax.swing.JLabel AdvisorIDLable;
    private javax.swing.JTable AdvisorTable;
    private javax.swing.JButton AssignBlanksButton;
    private javax.swing.JLabel BlankFromLable;
    private javax.swing.JTextField BlankIDFromField;
    private javax.swing.JTextField BlankIDToField;
    private javax.swing.JLabel BlankNumberLable;
    private javax.swing.JLabel BlankToLable;
    private javax.swing.JSpinner BlanksNumber;
    private javax.swing.JTable BlanksTable101;
    private javax.swing.JTable BlanksTable201;
    private javax.swing.JTable BlanksTable420;
    private javax.swing.JTable BlanksTable440;
    private javax.swing.JTable BlanksTable444;
    private javax.swing.JComboBox<String> BlanksType;
    private javax.swing.JButton MainPageButton;
    private javax.swing.JButton ReassignBlanksButton;
    private javax.swing.JButton UpdateAdvisorTable;
    private javax.swing.JButton UpdateBlanksTable;
    private javax.swing.JTextField blankNumberField;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables
}
